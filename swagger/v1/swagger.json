{
  "swagger": "2.0",
  "info": {
    "title": "Mock Hackney API",
    "version": "v1",
    "description": "This is a working mock API of the Hackney API.\n        It can be used for testing clients, or proposing future changes.\n        DO NOT USE FOR REAL PERSONAL DATA.\n        The source code is available at https://github.com/LBHackney-IT/mock_hackney_api"
  },
  "paths": {
    "/work_orders/{workOrderReference}/available_appointments": {
      "get": {
        "summary": "Retrieves available appointments",
        "tags": [
          "Appointments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workOrderReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "work order found",
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "properties": {
                    "resultset": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "offset": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "beginDate": {
                        "type": "string"
                      },
                      "endDate": {
                        "type": "string"
                      },
                      "bestSlot": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "work order not found"
          }
        }
      }
    },
    "/work_orders/{workOrderReference}/Appointments": {
      "post": {
        "summary": "Creates an appointment",
        "tags": [
          "Appointments"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workOrderReference",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "appointment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "appointment created",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          },
          "422": {
            "description": "invalid request"
          }
        }
      },
      "get": {
        "summary": "Retrieves an appointment",
        "tags": [
          "Appointments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workOrderReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "appointment found",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          },
          "404": {
            "description": "repair not found"
          }
        }
      }
    },
    "/Properties/?postcode={postcode}": {
      "get": {
        "summary": "Finds properties that match a postcode",
        "tags": [
          "Properties"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postcode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "postcode": {
                        "type": "string"
                      },
                      "propertyReference": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid post code"
          }
        }
      }
    },
    "/Properties/{propertyReference}": {
      "get": {
        "summary": "Retrieves a property",
        "tags": [
          "Properties"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                },
                "propertyReference": {
                  "type": "string"
                },
                "maintainable": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "invalid property reference"
          }
        }
      }
    },
    "/repairs": {
      "post": {
        "summary": "Creates a repair",
        "tags": [
          "Repairs"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repair",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/repair"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "repair created",
            "schema": {
              "$ref": "#/definitions/repair"
            }
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/repairs/{repairRequestReference}": {
      "get": {
        "summary": "Retrieves a request",
        "tags": [
          "Repairs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repairRequestReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "repair found",
            "schema": {
              "$ref": "#/definitions/repair"
            }
          },
          "404": {
            "description": "repair not found"
          }
        }
      }
    }
  },
  "definitions": {
    "repair": {
      "type": "object",
      "properties": {
        "repairRequestReference": {
          "type": "string"
        },
        "propertyReference": {
          "type": "string"
        },
        "problemDescription": {
          "type": "string",
          "example": "The fan is buzzing"
        },
        "priority": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "work_orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/work_order"
          }
        }
      }
    },
    "contact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "callbackTime": {
          "type": "string"
        }
      }
    },
    "work_order": {
      "type": "object",
      "properties": {
        "sorCode": {
          "type": "string"
        },
        "supplierRef": {
          "type": "string"
        }
      }
    },
    "appointment": {
      "type": "object",
      "properties": {
        "beginDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        }
      }
    }
  }
}