{
  "swagger": "2.0",
  "info": {
    "title": "Mock Hackney API",
    "version": "v1",
    "description": "This is a working mock API of the Hackney API.\n        It can be used for testing clients, or proposing future changes.\n        DO NOT USE FOR REAL PERSONAL DATA.\n        The source code is available at https://github.com/LBHackney-IT/mock_hackney_api"
  },
  "basePath": "/hackneyrepairs/v1",
  "paths": {
    "/work_orders/{workOrderReference}/available_appointments": {
      "get": {
        "summary": "Retrieves available appointments",
        "tags": [
          "Appointments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workOrderReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "work order found",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "beginDate": {
                        "type": "string"
                      },
                      "endDate": {
                        "type": "string"
                      },
                      "bestSlot": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "work order not found"
          }
        }
      }
    },
    "/work_orders/{workOrderReference}/appointments": {
      "post": {
        "summary": "Creates an appointment",
        "tags": [
          "Appointments"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workOrderReference",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "appointment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "appointment created",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          },
          "422": {
            "description": "invalid request"
          }
        }
      },
      "get": {
        "summary": "Retrieves an appointment",
        "tags": [
          "Appointments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workOrderReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "appointment found",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          },
          "404": {
            "description": "repair not found"
          }
        }
      }
    },
    "/properties/?postcode={postcode}": {
      "get": {
        "summary": "Finds dwellings that match a postcode",
        "tags": [
          "Properties"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postcode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "postcode": {
                        "type": "string"
                      },
                      "propertyReference": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid post code"
          }
        }
      }
    },
    "/properties/{propertyReference}": {
      "get": {
        "summary": "Retrieves a property",
        "tags": [
          "Changed"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                },
                "propertyReference": {
                  "type": "string"
                },
                "maintainable": {
                  "type": "boolean"
                },
                "floor": {
                  "type": "integer"
                },
                "residents": {
                  "type": "integer"
                },
                "heating": {
                  "type": "string"
                },
                "toilets": {
                  "type": "integer"
                },
                "bathrooms": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "invalid property reference"
          }
        }
      }
    },
    "/properties/{propertyReference}/block": {
      "get": {
        "summary": "Retrieves a block for a property",
        "tags": [
          "Proposed"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                },
                "propertyReference": {
                  "type": "string"
                },
                "maintainable": {
                  "type": "boolean"
                },
                "managerName": {
                  "type": "string"
                },
                "managerPhone": {
                  "type": "string"
                },
                "managerEmail": {
                  "type": "string"
                },
                "floors": {
                  "type": "integer"
                },
                "entranceDoors": {
                  "type": "integer"
                },
                "lifts": {
                  "type": "integer"
                },
                "heating": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "invalid property reference"
          }
        }
      }
    },
    "/properties/{propertyReference}/estate": {
      "get": {
        "summary": "Retrieves an estate for a property",
        "tags": [
          "Proposed"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                },
                "propertyReference": {
                  "type": "string"
                },
                "maintainable": {
                  "type": "boolean"
                },
                "managerName": {
                  "type": "string"
                },
                "managerPhone": {
                  "type": "string"
                },
                "managerEmail": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "invalid property reference"
          }
        }
      }
    },
    "/properties/{propertyReference}/residents": {
      "get": {
        "summary": "Retrieves the residents for a dwelling",
        "tags": [
          "Proposed"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "residents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "residentReference": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "last_call": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "invalid property reference"
          }
        }
      }
    },
    "/properties/{propertyReference}/repairs": {
      "get": {
        "summary": "Retrieves the repairs for a property",
        "tags": [
          "Proposed"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "properties found",
            "schema": {
              "type": "object",
              "properties": {
                "residents": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/repair"
                  }
                }
              }
            }
          },
          "404": {
            "description": "invalid property reference"
          }
        }
      }
    },
    "/repairs": {
      "post": {
        "summary": "Creates a repair",
        "tags": [
          "Changed"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repair",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/repair_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "repair created",
            "schema": {
              "$ref": "#/definitions/repair"
            }
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/repairs/{repairRequestReference}": {
      "get": {
        "summary": "Retrieves a request",
        "tags": [
          "Changed"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repairRequestReference",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "repair found",
            "schema": {
              "$ref": "#/definitions/repair"
            }
          },
          "404": {
            "description": "repair not found"
          }
        }
      }
    }
  },
  "definitions": {
    "repair_request": {
      "type": "object",
      "properties": {
        "propertyReference": {
          "type": "string",
          "example": "000001",
          "required": true
        },
        "problemDescription": {
          "type": "string",
          "example": "The fan is buzzing",
          "required": true
        },
        "priority": {
          "type": "string",
          "example": "N",
          "pattern": "^[UGINEZVMuginezvm]$",
          "required": true
        },
        "contact": {
          "$ref": "#/definitions/contact",
          "required": true
        },
        "work_orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/work_order_request"
          }
        }
      }
    },
    "repair": {
      "type": "object",
      "properties": {
        "repairRequestReference": {
          "type": "string"
        },
        "propertyReference": {
          "type": "string",
          "example": "000001"
        },
        "problemDescription": {
          "type": "string",
          "example": "The fan is buzzing"
        },
        "priority": {
          "type": "string",
          "example": "N"
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "work_orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/work_order"
          }
        }
      }
    },
    "contact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jon Smith",
          "required": true
        },
        "telephoneNumber": {
          "type": "string",
          "example": "07777777777",
          "required": true
        },
        "emailAddress": {
          "type": "string",
          "example": "test@test.com"
        },
        "callbackTime": {
          "type": "string",
          "example": "Morning"
        }
      }
    },
    "work_order_request": {
      "type": "object",
      "properties": {
        "sorCode": {
          "type": "string",
          "required": true
        }
      }
    },
    "work_order": {
      "type": "object",
      "properties": {
        "sorCode": {
          "type": "string",
          "example": "20040020"
        },
        "supplierReference": {
          "type": "string",
          "example": "W1"
        },
        "workOrderReference": {
          "type": "string",
          "exmaple": "01234567"
        },
        "estimatedCost": {
          "type": "double",
          "example": 10.5
        },
        "repairType": {
          "type": "string",
          "example": "Community Hall Repairs"
        },
        "status": {
          "type": "string",
          "example": "Completed"
        },
        "dueDate": {
          "type": "string",
          "example": "2018-06-18T09:00:00Z",
          "format": "date-time"
        },
        "expectedCompletion": {
          "type": "string",
          "example": "2018-06-18T09:00:00Z",
          "format": "date-time"
        },
        "attendedDate": {
          "type": "string",
          "example": "2018-06-18T09:00:00Z",
          "format": "date-time"
        },
        "attendedBy": {
          "type": "string",
          "example": "Geoff Smith"
        },
        "outcome": {
          "type": "string",
          "example": "Job Physically Complete"
        },
        "cancelledDate": {
          "type": "string",
          "example": "2018-06-18T09:00:00Z",
          "format": "date-time"
        }
      }
    },
    "appointment": {
      "type": "object",
      "properties": {
        "beginDate": {
          "type": "string",
          "example": "2018-06-18T09:00:00Z",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "example": "2018-06-18T10:00:00Z",
          "format": "date-time"
        }
      }
    }
  }
}